* Have compile return a Stats record of timing etc
* Implement deriving
  - started, Typeable so far
* make the runtime system catch ^C and stop execution
* use pointer stack during GC instead of recursion.
  - Somewhat improved now
* with dictionaries we need two optimizations to get rid of them
  -   case d of (d1,d2) -> ... (d1,d2) ...
    transforms to
      case d of (d1,d2) -> ... d ...
    this takes care of dictionary reconstruction
  -   f x y = ... f x e ...
    transforms to
      f x = let f' y = ... f' e ...
    this will specialize recursive functions
    (and make more efficient 'map' etc)
* Type checker improvements:
  - allow generalization for local bindings
  - use subsumption (like if) in the arms of alternatives
  - allow missing top level signatures (and generalize)
  - instead of skolemization, use regular variables, making sure they are unique
  - allow existential quantification
    # works partially, but not constraint solving doesn't happen in all the right places
    # check for escaping skolemized variables
* Try Oleg's abstraction algorithm
  - Seems to be slower
* Redo type synonym expansion
  - Only non-injective synonyms necessitate expansion(?)
  - Do expansion during unification
* Redo handling of synonym and instance tables.
  - These tables can persist during the compilation and only grow
* Implement two level tables for instances even in the tricky cases
* Handle tupled dictionaries better for recursive calls
* Split eval.c
  - Partially done
  - debug 32 bit
* Removing [] from prim table
* Faster compression
* Unicode, i.e., UTF-8 IO
  - use BFILE for file I/O
* Use pointer reversal, might be slower
  - In GC mark pass
  - In evaluator
* Fix bug uncovered by Data.Type.Equality
* mkQIdent
* Record pattern matching
